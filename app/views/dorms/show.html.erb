<p id="notice"><%= notice %></p>

<style type="text/css">
/*Following Modal was taken from https://www.w3schools.com/howto/howto_css_modals.asp */
/* The Modal (background) */
.modal {
   display: none; /* Hidden by default */
   position: fixed; /* Stay in place */
   z-index: 1; /* Sit on top */
   padding-top: 100px; /* Location of the box */
   left: 0;
   top: 0;
   width: 100%; /* Full width */
   height: 100%; /* Full height */
   overflow: auto; /* Enable scroll if needed */
   background-color: rgb(0,0,0); /* Fallback color */
   background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}
/* Modal Content */
.modal-content {
   background-color: #fefefe;
   margin: auto;
   padding: 20px;
   border: 1px solid #888;
   width: 80%;
}
/* The Close Button */
.close {
   color: #aaaaaa;
   float: right;
   font-size: 28px;
   font-weight: bold;
}
.close:hover,
.close:focus {
   color: #000;
   text-decoration: none;
   cursor: pointer;
}

/* The Color Boxes for the legend */
.input-color {
    position: absolute;
}
.input-color input {
    position: relative;
    width: 180px;
    height: 18px;
    left: 840px;
    top: 20px;
    background-color: transparent;
    border: 0px solid;
}
.input-color .color-box {
    width: 10px;
    height: 10px;
    display: inline-block;
    background-color: #ccc;
    position: relative;
    left: 640px;
    top: 21px;
}

.fixed {
  position: absolute;
  left: 100px;
  top: 160px;
}
.info {
  position: absolute;
  left: 20px;
  top: 115px;
}
</style>

<div class="info">
  <p>
    <% if current_user.is_admin? %>
      <%= link_to 'Edit', edit_dorm_path(@dorm) %> |
    <% end %>
      <%= link_to 'Go Back', dorms_path %>
    </br>
  </p>
</div>

<div class="fixed">
  <p>
    <strong>Dorm:</strong> <%= @dorm.name %>
  </p>
    <div class="dropdown" style="padding-right:700px">
        <button class="btn btn-default btn-md dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <%= @dorm.name %> <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
                <% @dorms.each do |dorm| %>
                    <li><%= link_to dorm.name, dorm, :"data-turbolinks" => false %></li>
                <% end %>
        </ul>
    </div>
</div>
  <div class="input-color">
    <input type="text" value="vacant" readonly></input>
      <div class="color-box" style="background-color: rgb(102, 168, 255);"></div></br>
    <input type="text" value="occupied but pullable" readonly></input>
      <div class="color-box" style="background-color: rgb(217, 189, 4);"></div></br>
    <input type="text" value="occupied and not pullable" readonly></input>
      <div class="color-box" style="background-color: rgb(136, 138, 139);"></div>
  </div>
  <p></br></p>


<!-- The Modal -->
<div id="myModal" class="modal">
    <!-- Modal content -->
  <div class="modal-content">
    <div class="modal-header">
      <span class="close">&times;</span>
      <h2>Pull request initiated</h2>
    </div>
    <div class="modal-body">
    <p>You have begun a pull request for this room</p>
      <p>The following form must be filled out in order to pull a room:</p>
      <%= render 'pullform', pull: @pull %>

  </div>  <!-- End of modal content -->
</div>  <!-- End of modal --> 

<!-- get dorm floor maps -->
<% if !@floor1.nil?  %>
  <%= image_tag(@floor1, :id => "floor1", :class => "map") %> 
<% end %>
<% if !@floor2.nil?  %>
  <%= image_tag(@floor2, :id => "floor2", :class => "map") %> 
<% end %>
<% if !@floor3.nil?  %>
  <%= image_tag(@floor3, :id => "floor3", :class => "map") %> 
<% end %>

<script type="text/javascript">
//activate dropdown for dorms
$('.dropdown-toggle').dropdown();

// Get the modal
var modal = document.getElementById('myModal');
// Get the button that opens the modal
var btn = document.getElementById("myBtn");
// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];
// When the user clicks on <span> (x), close the modal
span.onclick = function() {
    modal.style.display = "none";
}
// 
// $(document).on('turbolinks:load', function() {
//     layout(0);
// });

    var dormElements = [];

    var floorHold = $('<div>').css({
        position: 'absolute',
        left: 270,
        top: 223,
        height: 34,
        width: 115,
        background: 'rgb(255, 255, 255)',
        border: '1px solid rgb(200, 200, 200)',
        'border-radius': '5px',
        visibility: 'hidden',
    }).attr('id', 'floorHold').appendTo('body');

    var floorSelect = $('<div>').css({
        position: 'absolute',
        left: 270,
        top: 188,
        height: 34,
        width: 115,
        'font-size': '14px',
        'text-align': 'center',
        'line-height': '30px',
        color: 'black',
        border: '1px solid rgb(200, 200, 200)',
        'border-radius': '5px',
    }).attr('id', 'floorSelect').text('switch floors')
    .on('click', function(event){
        if (floorHold.css('visibility') !== 'visible') {
            floorHold.css({
                visibility: 'visible',
                'z-index': 100,
            });
        }
        else {
            floorHold.css({
                visibility: 'hidden',
                'z-index': 0,
            });
        }
    })
    .on('mouseenter', function(){
        $(this).css({
            background: 'rgb(232, 232, 232)',
        });
    })
    .on('mouseleave', function(){
        $(this).css({
            background: 'none',
        });
    })
    .appendTo('body');

    var heightCount = 0;
    $('.map').each(function(i) {
        heightCount++;
        $('<div>').css({
            position: 'absolute',
            left: 0,
            top: i*35,
            height: 33,
            width: 113,
            'border-radius': '5px',
            'text-align': 'center',
            'font-size': '17px',
            'z-index': 100,
        }).text(i+1).appendTo(floorHold)
        .on('click', function(){
            layout(i);
        })
        .on('mouseenter', function(){
            $(this).css({
                background: 'rgb(232, 232, 232)',
            });
        })
        .on('mouseleave', function(){
            $(this).css({
                background: 'none',
            });
        });
    });
    floorHold.css({
        height: heightCount*35,
    });


    var userDrawNum = <%= @curPullNum %>;
    var userRankNum = <%= @curRankNum %>;
    var mapLayout = <%= @json %>;

    function layout(level){ 
        for (var i = 0; i < dormElements.length; i++) {
            if (dormElements[i] !== undefined) {
                dormElements[i].remove();
            }
        }
        dormElements = [];
        console.log(level); 
        //get dorm room data
        var roomData; 
        switch (level) {
            case 0:
                roomData = <%= @level1 %>;
                break;
            case 1:
                roomData = <%= @level2 %>;
                break;
            case 2:
                roomData = <%= @level3 %>;
                break;
            default:
                
        }
        console.log(roomData);
        console.log(userRankNum);
        var room, val;
        //image map path
        var map = mapLayout.assets[level];
        //speciifc floor layout coordinates
        var floor = mapLayout.floors[level+1];
        var i = 0;
        var x = 0;
        var roomPullNum;
        var roomRankNum;
        var curRoomNum;

        //create image tag to size map correctly
        var imgLev = level+1;
        var img = document.getElementById('floor'+imgLev);  
        var width = img.width;
        var height = img.height;
        var ratio = height/width;
        var w = 940; 
        $(".map").css({
            display: 'none',
        });

        //create dorm map 
        var fakeDorm = $('<div>').css({
            position: 'absolute',
            left: 90,
            top: 250,
            width: 940,
            height: 940*ratio,
            'background-image': map,
            'background-size':  'contain',
            border: '5px solid black',
        }).appendTo('body');
        dormElements.push(fakeDorm);


        //get keys so that you can traverse js by index
        var keysbyindex = Object.keys(floor);
        while (x < keysbyindex.length) {
            
            //get data for room
              val = floor[keysbyindex[x]];
              room = $('<div>').css({
                  position: 'absolute',
                  left: 100*(val.bounding_box.x)+'%',
                  top: 100*(val.bounding_box.y)+'%',
                  height: 100*(val.bounding_box.h)+'%',
                  width: 100*(val.bounding_box.w)+'%',
                  background: 'none',
                  color: 'black',
                  'font-size': '10px',
              }).appendTo(fakeDorm);
              dormElements.push(room);
              
              //get db info about room
              if (roomData[i] !== undefined) {
                  room.info = roomData[i];
                  
                  //need to check if student_id is equal to current_user.student.id
                  //then you know if you are in room use bool in the while loop later
                  
                  //get names of students in room, possibly max of room draw numbers
                  roomPullNum = null;
                  room.curNames = [];
                  curRoomNum = roomData[i].number;
                  while (curRoomNum === roomData[i].number) {
                      if (roomData[i].room_draw_number === userDrawNum) {
                          room.css({
                              background: 'rgb(217, 189, 4)',
                          });
                          roomRankNum = roomData[i].class_rank
                          roomPullNum = userDrawNum;
                      }
                      else if (roomData[i].student_id !== null) {
                          roomPullNum = roomData[i].room_draw_number;
                          roomRankNum = roomData[i].class_rank
                      }
                      
                      if (roomData[i].first_name !== null) {
                          room.curNames.push(roomData[i].first_name+' '+roomData[i].last_name);  
                      }
                      i++;
                      if (roomData[i] === undefined) {
                          break;
                      }
                  }
                  //check if your room draw number is lower or the roomo is not pulled at all
                  if (roomRankNum > userRankNum || (roomRankNum === userRankNum && userDrawNum < roomPullNum) || roomPullNum === null) {
                      room.css({
                          background: 'rgb(102, 168, 255)',
                      });
                  }
                  //room is pulled by someone with higher number
                  else if((userDrawNum > roomPullNum && roomRankNum === userRankNum) || userRankNum > roomRankNum) {
                      room.css({
                          background: 'rgb(136, 138, 139)',
                      });
                  }
                  
                  
              }//if no db info on room ie undefined in roomData then just say its open
              else {
                  room.css({
                      background: 'rgb(102, 168, 255)',
                  });
              }
              
              if (room.curNames !== undefined) {
                  if (room.curNames[0] !== undefined) {
                      console.log(roomPullNum);
                      var nameString = '';
                      for (var j = 0; j < room.curNames.length; j++) {
                          nameString = nameString + room.curNames[j] +', ';
                      }
                      room.text(nameString + roomPullNum);
                  }
              }
              
              room.on('mouseenter', function(){
                 $(this).css({
                     opacity: .5,
                 }); 
              });
              
              room.on('mouseleave', function(){
                 $(this).css({
                        opacity: 1,
                 }); 
              });
              
              room.on('click', {info: room.info}, function(event){
                  if (event.data.info !== undefined) {
                      //show room info and populate form with room number
                      var info = event.data.info;
                      console.log(info);
                      $('#usr').val(info.number);
                  }
                  modal.style.display = "block";
              });
            x++;
        }
    }


    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    window.onkeyup = function(event) {
      if (event.keyCode == 27) {
        modal.style.display = "none";
        floorHold.css({
            visibility: 'hidden',
            'z-index': 0
        });
      }
    }
    
    $(document).click(function(event) { 
    if(!$(event.target).closest('#floorHold').length && !$(event.target).closest('#floorSelect').length) {
        if($('#floorHold').css("visibility") === 'visible') {
            $('#floorHold').css({
                visibility: 'hidden',
                'z-index': 0
            });
        }
    }        
});
    layout(0);
    
</script>

<!-- Script for using radio buttons to show input field on the pull request
  General code structure adapted from: https://www.aspsnippets.com/Articles/Show-Hide-DIV-with-TextBox-based-on-RadioButton-selection-checked-unchecked-using-JavaScript-and-jQuery.aspx 
  "require-if active" from: https://css-tricks.com/exposing-form-fields-radio-button-css/ !-->
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script type="text/javascript">
    $(function () {
        $("input[name='roommate-nums']").click(function () {
            if ($("#1-roommates").is(":checked")) {
                $("#roommate-1").show(); $("#roommate-2").hide(); $("#roommate-3").hide(); $("#roommate-4").hide(); $("#roommate-5").hide();
            } else if ($("#2-roommates").is(":checked")) {
                $("#roommate-1").hide(); $("#roommate-2").show(); $("#roommate-3").hide(); $("#roommate-4").hide(); $("#roommate-5").hide();
            } else if ($("#3-roommates").is(":checked")) {
                $("#roommate-1").hide(); $("#roommate-2").hide(); $("#roommate-3").show(); $("#roommate-4").hide(); $("#roommate-5").hide();
            } else if ($("#4-roommates").is(":checked")) {
                $("#roommate-1").hide(); $("#roommate-2").hide(); $("#roommate-3").hide(); $("#roommate-4").show(); $("#roommate-5").hide();
            } else if ($("#5-roommates").is(":checked")) {
                $("#roommate-1").hide(); $("#roommate-2").hide(); $("#roommate-3").hide(); $("#roommate-4").hide(); $("#roommate-5").show();
            } else {
                $("#roommate-1").hide(); $("#roommate-2").hide(); $("#roommate-3").hide(); $("#roommate-4").hide(); $("#roommate-5").hide();            
            } 
        });
      // find each input that may be hidden or not
      $(".require-if-active").each(function() {
        var el = $(this);
        // find the pairing radio or checkbox
        if ($(el.data("require-pair")).is(":checked")) {
          // if its checked, the field should be required
          el.prop("required", true);
        } else {
          // otherwise it should not
          el.prop("required", false);
        }
      });
    });
</script>

